
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import lexer.*;
import java_cup.runtime.*;
import parser.newLangTree.nodes.*;
import parser.newLangTree.nodes.expression.*;
import parser.newLangTree.nodes.expression.constants.*;
import parser.newLangTree.nodes.statements.*;
import exception.SyntaxError;
import parser.newLangTree.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\003\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\006\012\000\002\006\011\000\002\013\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\004\000\002\014\003" +
    "\000\002\014\005\000\002\015\004\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\017\004\000\002" +
    "\017\003\000\002\021\003\000\002\021\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\003\000\002\020\004\000" +
    "\002\020\005\000\002\020\004\000\002\020\003\000\002" +
    "\020\004\000\002\022\006\000\002\022\010\000\002\023" +
    "\006\000\002\024\012\000\002\025\005\000\002\025\004" +
    "\000\002\027\003\000\002\027\005\000\002\026\006\000" +
    "\002\026\006\000\002\030\005\000\002\031\006\000\002" +
    "\031\005\000\002\032\003\000\002\032\005\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\006\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\004\000\002\033\004\000\002\033\005\000\002\033" +
    "\005\000\002\034\011\000\002\034\010\000\002\036\004" +
    "\000\002\036\003\000\002\035\010\000\002\035\007\000" +
    "\002\042\004\000\002\042\004\000\002\037\011\000\002" +
    "\037\010\000\002\040\006\000\002\040\005\000\002\041" +
    "\006\000\002\041\005\000\002\043\006\000\002\043\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\022\004\uffff\005\015\022\017\023\012\025" +
    "\013\026\005\027\007\030\016\001\002\000\004\062\314" +
    "\001\002\000\006\016\ufff9\062\ufff9\001\002\000\004\002" +
    "\345\001\002\000\006\016\ufff8\062\ufff8\001\002\000\024" +
    "\002\uffff\004\uffff\005\015\022\017\023\012\025\013\026" +
    "\005\027\007\030\016\001\002\000\024\002\uffff\004\uffff" +
    "\005\015\022\017\023\012\025\013\026\005\027\007\030" +
    "\016\001\002\000\006\016\ufff6\062\ufff6\001\002\000\004" +
    "\062\276\001\002\000\004\004\335\001\002\000\004\062" +
    "\020\001\002\000\006\016\ufff7\062\ufff7\001\002\000\006" +
    "\016\ufff5\062\ufff5\001\002\000\004\013\021\001\002\000" +
    "\020\014\025\021\026\022\017\023\012\026\005\027\007" +
    "\030\016\001\002\000\006\014\327\020\330\001\002\000" +
    "\004\062\030\001\002\000\006\014\uffe2\020\uffe2\001\002" +
    "\000\004\015\034\001\002\000\014\022\017\023\012\026" +
    "\005\027\007\030\016\001\002\000\004\062\030\001\002" +
    "\000\010\012\uffc7\014\uffc7\020\uffc7\001\002\000\010\012" +
    "\032\014\uffdf\020\uffdf\001\002\000\004\062\033\001\002" +
    "\000\014\012\uffc6\014\uffc6\020\uffc6\036\uffc6\043\uffc6\001" +
    "\002\000\016\022\017\023\012\024\037\026\005\027\007" +
    "\030\016\001\002\000\004\016\040\001\002\000\004\016" +
    "\uffde\001\002\000\004\016\uffdd\001\002\000\040\010\057" +
    "\013\070\017\055\022\017\023\012\025\013\026\005\027" +
    "\007\030\016\031\067\033\052\034\047\056\045\062\053" +
    "\076\050\001\002\000\024\002\uffe7\004\uffe7\005\uffe7\022" +
    "\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\001\002" +
    "\000\026\006\uffd7\010\uffd7\013\uffd7\017\uffd7\031\uffd7\033" +
    "\uffd7\034\uffd7\056\uffd7\062\uffd7\076\uffd7\001\002\000\004" +
    "\011\325\001\002\000\026\006\uffda\010\057\013\070\017" +
    "\uffda\031\067\033\052\034\047\056\045\062\053\076\050" +
    "\001\002\000\004\013\270\001\002\000\004\011\267\001" +
    "\002\000\026\013\111\045\103\052\116\061\107\062\114" +
    "\063\113\064\104\065\115\066\110\067\112\001\002\000" +
    "\030\011\262\013\111\045\103\052\116\061\107\062\114" +
    "\063\113\064\104\065\115\066\110\067\112\001\002\000" +
    "\004\011\260\001\002\000\026\013\111\045\103\052\116" +
    "\061\107\062\114\063\113\064\104\065\115\066\110\067" +
    "\112\001\002\000\012\012\uffc7\013\247\036\uffc7\043\uffc7" +
    "\001\002\000\004\017\246\001\002\000\052\002\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\010\uffe3\013\uffe3\017\uffe3\022\uffe3" +
    "\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\056\uffe3\062\uffe3\076\uffe3\001\002" +
    "\000\024\010\057\013\070\017\244\031\067\033\052\034" +
    "\047\056\045\062\053\076\050\001\002\000\004\013\222" +
    "\001\002\000\010\012\032\036\216\043\217\001\002\000" +
    "\040\010\uffdb\013\uffdb\017\uffdb\022\017\023\012\025\013" +
    "\026\005\027\007\030\016\031\uffdb\033\uffdb\034\uffdb\056" +
    "\uffdb\062\uffdb\076\uffdb\001\002\000\026\006\uffd3\010\uffd3" +
    "\013\uffd3\017\uffd3\031\uffd3\033\uffd3\034\uffd3\056\uffd3\062" +
    "\uffd3\076\uffd3\001\002\000\004\011\214\001\002\000\026" +
    "\006\uffcf\010\uffcf\013\uffcf\017\uffcf\031\uffcf\033\uffcf\034" +
    "\uffcf\056\uffcf\062\uffcf\076\uffcf\001\002\000\026\006\uffd8" +
    "\010\uffd8\013\uffd8\017\uffd8\031\uffd8\033\uffd8\034\uffd8\056" +
    "\uffd8\062\uffd8\076\uffd8\001\002\000\004\011\213\001\002" +
    "\000\004\062\204\001\002\000\026\013\111\045\103\052" +
    "\116\061\107\062\114\063\113\064\104\065\115\066\110" +
    "\067\112\001\002\000\004\057\072\001\002\000\004\016" +
    "\073\001\002\000\024\010\057\013\070\017\075\031\067" +
    "\033\052\034\047\056\045\062\053\076\050\001\002\000" +
    "\004\017\175\001\002\000\004\031\076\001\002\000\004" +
    "\013\171\001\002\000\004\060\100\001\002\000\004\013" +
    "\102\001\002\000\004\011\uff9a\001\002\000\030\013\111" +
    "\014\117\045\103\052\116\061\107\062\114\063\113\064" +
    "\104\065\115\066\110\067\112\001\002\000\026\013\111" +
    "\045\103\052\116\061\107\062\114\063\113\064\104\065" +
    "\115\066\110\067\112\001\002\000\054\011\uffbb\012\uffbb" +
    "\014\uffbb\015\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\001" +
    "\002\000\046\011\uffc0\012\166\014\uffc0\043\132\044\125" +
    "\045\121\046\133\047\131\050\122\051\137\053\123\054" +
    "\135\070\130\071\124\072\136\073\127\074\126\075\134" +
    "\001\002\000\004\014\165\001\002\000\054\011\uffba\012" +
    "\uffba\014\uffba\015\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\053\uffba\054" +
    "\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba" +
    "\001\002\000\054\011\uffbe\012\uffbe\014\uffbe\015\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\053\uffbe\054\uffbe\070\uffbe\071\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002\000\026\013\111" +
    "\045\103\052\116\061\107\062\114\063\113\064\104\065" +
    "\115\066\110\067\112\001\002\000\054\011\uffbd\012\uffbd" +
    "\014\uffbd\015\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd" +
    "\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\001" +
    "\002\000\054\011\uffbc\012\uffbc\014\uffbc\015\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\053\uffbc\054\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\001\002\000\056\011\uffb8\012" +
    "\uffb8\013\157\014\uffb8\015\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\053" +
    "\uffb8\054\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\001\002\000\054\011\uffb9\012\uffb9\014\uffb9\015" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002\000\026" +
    "\013\111\045\103\052\116\061\107\062\114\063\113\064" +
    "\104\065\115\066\110\067\112\001\002\000\004\011\uff94" +
    "\001\002\000\054\011\uffa6\012\uffa6\014\uffa6\015\uffa6\041" +
    "\uffa6\042\uffa6\043\132\044\125\045\121\046\133\047\131" +
    "\050\122\051\137\053\123\054\135\070\130\071\124\072" +
    "\136\073\127\074\126\075\134\001\002\000\026\013\111" +
    "\045\103\052\116\061\107\062\114\063\113\064\104\065" +
    "\115\066\110\067\112\001\002\000\026\013\111\045\103" +
    "\052\116\061\107\062\114\063\113\064\104\065\115\066" +
    "\110\067\112\001\002\000\026\013\111\045\103\052\116" +
    "\061\107\062\114\063\113\064\104\065\115\066\110\067" +
    "\112\001\002\000\026\013\111\045\103\052\116\061\107" +
    "\062\114\063\113\064\104\065\115\066\110\067\112\001" +
    "\002\000\026\013\111\045\103\052\116\061\107\062\114" +
    "\063\113\064\104\065\115\066\110\067\112\001\002\000" +
    "\026\013\111\045\103\052\116\061\107\062\114\063\113" +
    "\064\104\065\115\066\110\067\112\001\002\000\026\013" +
    "\111\045\103\052\116\061\107\062\114\063\113\064\104" +
    "\065\115\066\110\067\112\001\002\000\026\013\111\045" +
    "\103\052\116\061\107\062\114\063\113\064\104\065\115" +
    "\066\110\067\112\001\002\000\026\013\111\045\103\052" +
    "\116\061\107\062\114\063\113\064\104\065\115\066\110" +
    "\067\112\001\002\000\026\013\111\045\103\052\116\061" +
    "\107\062\114\063\113\064\104\065\115\066\110\067\112" +
    "\001\002\000\026\013\111\045\103\052\116\061\107\062" +
    "\114\063\113\064\104\065\115\066\110\067\112\001\002" +
    "\000\026\013\111\045\103\052\116\061\107\062\114\063" +
    "\113\064\104\065\115\066\110\067\112\001\002\000\026" +
    "\013\111\045\103\052\116\061\107\062\114\063\113\064" +
    "\104\065\115\066\110\067\112\001\002\000\026\013\111" +
    "\045\103\052\116\061\107\062\114\063\113\064\104\065" +
    "\115\066\110\067\112\001\002\000\026\013\111\045\103" +
    "\052\116\061\107\062\114\063\113\064\104\065\115\066" +
    "\110\067\112\001\002\000\054\011\uffae\012\uffae\014\uffae" +
    "\015\uffae\041\uffae\042\uffae\043\uffae\044\125\045\121\046" +
    "\133\047\131\050\uffae\051\uffae\053\123\054\135\070\130" +
    "\071\124\072\136\073\127\074\126\075\134\001\002\000" +
    "\040\011\uffab\012\uffab\014\uffab\015\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\125\045\121\046\133\047\131\050\uffab\051" +
    "\uffab\053\123\054\135\001\002\000\054\011\uffaf\012\uffaf" +
    "\014\uffaf\015\uffaf\041\uffaf\042\uffaf\043\uffaf\044\125\045" +
    "\121\046\133\047\131\050\uffaf\051\uffaf\053\123\054\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\001" +
    "\002\000\040\011\uffa8\012\uffa8\014\uffa8\015\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\125\045\121\046\133\047\131\050" +
    "\uffa8\051\uffa8\053\123\054\135\001\002\000\054\011\uffb3" +
    "\012\uffb3\014\uffb3\015\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\121\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3" +
    "\054\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075" +
    "\uffb3\001\002\000\054\011\uffa4\012\uffa4\014\uffa4\015\uffa4" +
    "\041\uffa4\042\uffa4\043\132\044\125\045\121\046\133\047" +
    "\131\050\122\051\137\053\123\054\135\070\130\071\124" +
    "\072\136\073\127\074\126\075\134\001\002\000\054\011" +
    "\uffb2\012\uffb2\014\uffb2\015\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\121\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053" +
    "\uffb2\054\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\001\002\000\040\011\uffad\012\uffad\014\uffad\015" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\125\045\121\046\133" +
    "\047\131\050\uffad\051\uffad\053\123\054\135\001\002\000" +
    "\040\011\uffaa\012\uffaa\014\uffaa\015\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\125\045\121\046\133\047\131\050\uffaa\051" +
    "\uffaa\053\123\054\135\001\002\000\040\011\uffa9\012\uffa9" +
    "\014\uffa9\015\uffa9\041\uffa9\042\uffa9\043\uffa9\044\125\045" +
    "\121\046\133\047\131\050\uffa9\051\uffa9\053\123\054\135" +
    "\001\002\000\054\011\uffb5\012\uffb5\014\uffb5\015\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\121\046\133\047\131" +
    "\050\uffb5\051\uffb5\053\123\054\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\040\011\uffac" +
    "\012\uffac\014\uffac\015\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\125\045\121\046\133\047\131\050\uffac\051\uffac\053\123" +
    "\054\135\001\002\000\054\011\uffb0\012\uffb0\014\uffb0\015" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\121\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\053\uffb0\054\uffb0\070\uffb0\071" +
    "\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\001\002\000\054" +
    "\011\uffb1\012\uffb1\014\uffb1\015\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\125\045\121\046\133\047\131\050\uffb1\051\uffb1" +
    "\053\123\054\135\070\130\071\124\072\136\073\127\074" +
    "\126\075\134\001\002\000\054\011\uffb4\012\uffb4\014\uffb4" +
    "\015\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\001\002\000" +
    "\030\013\111\014\161\045\103\052\116\061\107\062\114" +
    "\063\113\064\104\065\115\066\110\067\112\001\002\000" +
    "\004\014\162\001\002\000\054\011\uffb6\012\uffb6\014\uffb6" +
    "\015\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002\000" +
    "\054\011\uffb7\012\uffb7\014\uffb7\015\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\053\uffb7\054\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\001\002\000\042\014\164\043\132\044" +
    "\125\045\121\046\133\047\131\050\122\051\137\053\123" +
    "\054\135\070\130\071\124\072\136\073\127\074\126\075" +
    "\134\001\002\000\054\011\uffa5\012\uffa5\014\uffa5\015\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\053\uffa5\054\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\075\uffa5\001\002\000\004\011" +
    "\uff95\001\002\000\026\013\111\045\103\052\116\061\107" +
    "\062\114\063\113\064\104\065\115\066\110\067\112\001" +
    "\002\000\006\011\uffbf\014\uffbf\001\002\000\054\011\uffa7" +
    "\012\uffa7\014\uffa7\015\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7" +
    "\054\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075" +
    "\uffa7\001\002\000\030\013\111\014\173\045\103\052\116" +
    "\061\107\062\114\063\113\064\104\065\115\066\110\067" +
    "\112\001\002\000\042\014\174\043\132\044\125\045\121" +
    "\046\133\047\131\050\122\051\137\053\123\054\135\070" +
    "\130\071\124\072\136\073\127\074\126\075\134\001\002" +
    "\000\004\060\uff96\001\002\000\004\060\uff97\001\002\000" +
    "\004\031\076\001\002\000\004\060\100\001\002\000\004" +
    "\011\uff9b\001\002\000\004\014\201\001\002\000\006\037" +
    "\202\040\203\001\002\000\004\011\uffc5\001\002\000\004" +
    "\011\uffc4\001\002\000\004\043\205\001\002\000\004\063" +
    "\206\001\002\000\004\032\207\001\002\000\004\063\210" +
    "\001\002\000\004\042\211\001\002\000\004\016\040\001" +
    "\002\000\026\006\uffca\010\uffca\013\uffca\017\uffca\031\uffca" +
    "\033\uffca\034\uffca\056\uffca\062\uffca\076\uffca\001\002\000" +
    "\026\006\uffce\010\uffce\013\uffce\017\uffce\031\uffce\033\uffce" +
    "\034\uffce\056\uffce\062\uffce\076\uffce\001\002\000\026\006" +
    "\uffd5\010\uffd5\013\uffd5\017\uffd5\031\uffd5\033\uffd5\034\uffd5" +
    "\056\uffd5\062\uffd5\076\uffd5\001\002\000\024\010\uffdc\013" +
    "\uffdc\017\uffdc\031\uffdc\033\uffdc\034\uffdc\056\uffdc\062\uffdc" +
    "\076\uffdc\001\002\000\006\011\uffc8\061\221\001\002\000" +
    "\026\013\111\045\103\052\116\061\107\062\114\063\113" +
    "\064\104\065\115\066\110\067\112\001\002\000\004\011" +
    "\uffc3\001\002\000\004\011\uffc9\001\002\000\026\013\111" +
    "\045\103\052\116\061\107\062\114\063\113\064\104\065" +
    "\115\066\110\067\112\001\002\000\042\014\224\043\132" +
    "\044\125\045\121\046\133\047\131\050\122\051\137\053" +
    "\123\054\135\070\130\071\124\072\136\073\127\074\126" +
    "\075\134\001\002\000\004\016\225\001\002\000\006\007" +
    "\230\017\231\001\002\000\006\007\230\017\uffa0\001\002" +
    "\000\004\017\241\001\002\000\026\013\111\045\103\052" +
    "\116\061\107\062\114\063\113\064\104\065\115\066\110" +
    "\067\112\001\002\000\026\006\uffa2\010\uffa2\013\uffa2\017" +
    "\uffa2\031\uffa2\033\uffa2\034\uffa2\056\uffa2\062\uffa2\076\uffa2" +
    "\001\002\000\042\015\233\043\132\044\125\045\121\046" +
    "\133\047\131\050\122\051\137\053\123\054\135\070\130" +
    "\071\124\072\136\073\127\074\126\075\134\001\002\000" +
    "\024\006\235\010\057\013\070\031\067\033\052\034\047" +
    "\056\045\062\053\076\050\001\002\000\004\006\237\001" +
    "\002\000\004\011\236\001\002\000\006\007\uff9e\017\uff9e" +
    "\001\002\000\004\011\240\001\002\000\006\007\uff9f\017" +
    "\uff9f\001\002\000\026\006\uffa3\010\uffa3\013\uffa3\017\uffa3" +
    "\031\uffa3\033\uffa3\034\uffa3\056\uffa3\062\uffa3\076\uffa3\001" +
    "\002\000\004\017\uffa1\001\002\000\004\017\245\001\002" +
    "\000\052\002\uffe5\004\uffe5\005\uffe5\006\uffe5\010\uffe5\013" +
    "\uffe5\017\uffe5\022\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\056\uffe5\062" +
    "\uffe5\076\uffe5\001\002\000\052\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\010\uffe6\013\uffe6\017\uffe6\022\uffe6\023\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\056\uffe6\062\uffe6\076\uffe6\001\002\000\052\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\010\uffe4\013\uffe4\017\uffe4" +
    "\022\uffe4\023\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\056\uffe4\062\uffe4\076\uffe4" +
    "\001\002\000\030\013\111\014\251\045\103\052\116\061" +
    "\107\062\114\063\113\064\104\065\115\066\110\067\112" +
    "\001\002\000\004\014\252\001\002\000\004\011\uffc1\001" +
    "\002\000\004\011\uffc2\001\002\000\042\041\254\043\132" +
    "\044\125\045\121\046\133\047\131\050\122\051\137\053" +
    "\123\054\135\070\130\071\124\072\136\073\127\074\126" +
    "\075\134\001\002\000\004\016\040\001\002\000\030\006" +
    "\uffcd\010\uffcd\013\uffcd\017\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\035\256\056\uffcd\062\uffcd\076\uffcd\001\002\000\004\016" +
    "\040\001\002\000\026\006\uffcc\010\uffcc\013\uffcc\017\uffcc" +
    "\031\uffcc\033\uffcc\034\uffcc\056\uffcc\062\uffcc\076\uffcc\001" +
    "\002\000\026\006\uffd2\010\uffd2\013\uffd2\017\uffd2\031\uffd2" +
    "\033\uffd2\034\uffd2\056\uffd2\062\uffd2\076\uffd2\001\002\000" +
    "\042\011\263\043\132\044\125\045\121\046\133\047\131" +
    "\050\122\051\137\053\123\054\135\070\130\071\124\072" +
    "\136\073\127\074\126\075\134\001\002\000\026\006\uffd0" +
    "\010\uffd0\013\uffd0\017\uffd0\031\uffd0\033\uffd0\034\uffd0\056" +
    "\uffd0\062\uffd0\076\uffd0\001\002\000\026\006\uffd1\010\uffd1" +
    "\013\uffd1\017\uffd1\031\uffd1\033\uffd1\034\uffd1\056\uffd1\062" +
    "\uffd1\076\uffd1\001\002\000\042\042\265\043\132\044\125" +
    "\045\121\046\133\047\131\050\122\051\137\053\123\054" +
    "\135\070\130\071\124\072\136\073\127\074\126\075\134" +
    "\001\002\000\004\016\040\001\002\000\026\006\uffcb\010" +
    "\uffcb\013\uffcb\017\uffcb\031\uffcb\033\uffcb\034\uffcb\056\uffcb" +
    "\062\uffcb\076\uffcb\001\002\000\026\006\uffd4\010\uffd4\013" +
    "\uffd4\017\uffd4\031\uffd4\033\uffd4\034\uffd4\056\uffd4\062\uffd4" +
    "\076\uffd4\001\002\000\020\014\273\022\017\023\012\025" +
    "\272\026\005\027\007\030\016\001\002\000\004\062\314" +
    "\001\002\000\004\062\276\001\002\000\004\057\uff98\001" +
    "\002\000\004\014\275\001\002\000\004\057\uff99\001\002" +
    "\000\004\043\312\001\002\000\006\012\300\014\uff9c\001" +
    "\002\000\004\062\301\001\002\000\004\043\302\001\002" +
    "\000\016\061\303\063\304\064\307\065\311\066\305\067" +
    "\306\001\002\000\010\011\uffea\012\uffea\014\uffea\001\002" +
    "\000\010\011\uffee\012\uffee\014\uffee\001\002\000\010\011" +
    "\uffec\012\uffec\014\uffec\001\002\000\010\011\uffeb\012\uffeb" +
    "\014\uffeb\001\002\000\010\011\uffed\012\uffed\014\uffed\001" +
    "\002\000\010\011\uffef\012\uffef\014\uffef\001\002\000\010" +
    "\011\uffe9\012\uffe9\014\uffe9\001\002\000\016\061\303\063" +
    "\304\064\307\065\311\066\305\067\306\001\002\000\010" +
    "\011\ufff0\012\ufff0\014\ufff0\001\002\000\012\011\ufff4\012" +
    "\ufff4\014\ufff4\043\322\001\002\000\006\012\316\014\uff9d" +
    "\001\002\000\004\062\317\001\002\000\012\011\ufff3\012" +
    "\ufff3\014\ufff3\043\320\001\002\000\026\013\111\045\103" +
    "\052\116\061\107\062\114\063\113\064\104\065\115\066" +
    "\110\067\112\001\002\000\046\011\ufff1\012\ufff1\014\ufff1" +
    "\043\132\044\125\045\121\046\133\047\131\050\122\051" +
    "\137\053\123\054\135\070\130\071\124\072\136\073\127" +
    "\074\126\075\134\001\002\000\026\013\111\045\103\052" +
    "\116\061\107\062\114\063\113\064\104\065\115\066\110" +
    "\067\112\001\002\000\046\011\ufff2\012\ufff2\014\ufff2\043" +
    "\132\044\125\045\121\046\133\047\131\050\122\051\137" +
    "\053\123\054\135\070\130\071\124\072\136\073\127\074" +
    "\126\075\134\001\002\000\006\006\uffd9\017\uffd9\001\002" +
    "\000\026\006\uffd6\010\uffd6\013\uffd6\017\uffd6\031\uffd6\033" +
    "\uffd6\034\uffd6\056\uffd6\062\uffd6\076\uffd6\001\002\000\010" +
    "\012\032\014\uffe0\020\uffe0\001\002\000\004\015\332\001" +
    "\002\000\016\021\026\022\017\023\012\026\005\027\007" +
    "\030\016\001\002\000\006\014\uffe1\020\uffe1\001\002\000" +
    "\016\022\017\023\012\024\037\026\005\027\007\030\016" +
    "\001\002\000\004\016\040\001\002\000\024\002\uffe8\004" +
    "\uffe8\005\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\001\002\000\004\005\015\001\002\000\022\002" +
    "\uffff\005\015\022\017\023\012\025\013\026\005\027\007" +
    "\030\016\001\002\000\004\002\001\001\002\000\022\002" +
    "\ufffc\005\ufffc\022\ufffc\023\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\001\002\000\006\011\342\012\300\001\002\000" +
    "\046\002\ufffa\004\ufffa\005\ufffa\010\ufffa\013\ufffa\017\ufffa" +
    "\022\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\033\ufffa\034\ufffa\056\ufffa\062\ufffa\076\ufffa\001\002" +
    "\000\006\002\ufffe\004\ufffe\001\002\000\006\002\ufffd\004" +
    "\ufffd\001\002\000\004\002\000\001\002\000\006\011\347" +
    "\012\316\001\002\000\046\002\ufffb\004\ufffb\005\ufffb\010" +
    "\ufffb\013\ufffb\017\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\056\ufffb\062" +
    "\ufffb\076\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\014\002\005\003\013\005\010\006\007\007" +
    "\003\001\001\000\004\010\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\343\005" +
    "\010\006\007\007\003\001\001\000\012\003\342\005\010" +
    "\006\007\007\003\001\001\000\002\001\001\000\004\011" +
    "\340\001\001\000\004\004\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\022\014\021\015\023\001\001\000\002\001\001" +
    "\000\004\027\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\026\001\001\000\004\027\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\035\016\034\001\001\000\004" +
    "\013\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\005\060\007\003\017\055\020\043\021\053\022\064" +
    "\023\061\024\041\025\042\026\062\027\057\030\045\031" +
    "\050\034\063\037\065\040\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\020\043\021" +
    "\323\022\064\023\061\024\041\025\042\026\062\027\057" +
    "\030\045\031\050\034\063\037\065\040\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\263\001\001" +
    "\000\004\033\260\001\001\000\002\001\001\000\004\033" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\020\043\021\242\022\064\023\061\024" +
    "\041\025\042\026\062\027\057\030\045\031\050\034\063" +
    "\037\065\040\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\060\007\003\017\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\177" +
    "\033\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\020\043\021\073\022\064\023\061\024\041\025\042" +
    "\026\062\027\057\030\045\031\050\034\063\037\065\040" +
    "\070\001\001\000\002\001\001\000\004\041\076\001\001" +
    "\000\002\001\001\000\004\043\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\105\033\104\001\001" +
    "\000\004\033\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\155\001\001\000\004\033\154\001\001\000\004\033\153" +
    "\001\001\000\004\033\152\001\001\000\004\033\151\001" +
    "\001\000\004\033\150\001\001\000\004\033\147\001\001" +
    "\000\004\033\146\001\001\000\004\033\145\001\001\000" +
    "\004\033\144\001\001\000\004\033\143\001\001\000\004" +
    "\033\142\001\001\000\004\033\141\001\001\000\004\033" +
    "\140\001\001\000\004\033\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\157\033\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\166\033\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\175\001\001\000\004" +
    "\043\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\217\033\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\225" +
    "\036\226\001\001\000\006\035\225\036\241\001\001\000" +
    "\002\001\001\000\004\033\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\020\043\021\233\022\064\023" +
    "\061\024\041\025\042\026\062\027\057\030\045\031\050" +
    "\034\063\037\065\040\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\247\033\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\254\001\001\000\002\001\001\000\004\013\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\270\042\273\001\001\000\004\010\314\001" +
    "\001\000\004\011\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\320\001\001\000\002\001" +
    "\001\000\004\033\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\022\015\330\001\001\000\002\001\001" +
    "\000\006\007\035\016\332\001\001\000\004\013\333\001" +
    "\001\000\002\001\001\000\004\006\337\001\001\000\012" +
    "\003\336\005\010\006\007\007\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Lexer lex;
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
  }

    public void report_fatal_error(String message, Object info){
        report_error(message,info);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
            this.report_fatal_error("at", cur_token.left);
     }

    public void report_error(String message, Object info) {
            if (info instanceof ComplexSymbolFactory.ComplexSymbol) {
              ComplexSymbolFactory.ComplexSymbol cs = (ComplexSymbolFactory.ComplexSymbol)info;
              throw new SyntaxError("Errore sintattico (riga: " + cs.getLeft().getLine() +
                    ", colonna: " + cs.getRight().getColumn()+")"+
                    "\n-> \"Se non puoi fare qualcosa allora non farlo. Concentrati su ciò che puoi!\" \n"
                    +expected_tokenList());
            }
        }

    public String expected_tokenList() {
          List<Integer> ids = this.expected_token_ids();
          LinkedList<String> list = new LinkedList();
          Iterator var3 = ids.iterator();
          String str="";

          while(var3.hasNext()) {
            Integer expected = (Integer)var3.next();
            list.add(this.symbl_name_from_id(expected));
            str+="["+this.symbl_name_from_id(expected)+"],";
          }

          if (!str.equals(""))
            str = "\n-> Possibili token da inserire: " + str.substring(0,str.length()-1);

          return str;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramNode RESULT =null;
		Location dl1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dl1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<DeclNode> dl1 = (List<DeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MainFuncDeclNode m = (MainFuncDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<DeclNode> dl2 = (List<DeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                               RESULT = new ProgramNode(dl1,m, dl2);
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= 
            {
              List<DeclNode> RESULT =null;
		
                                                               List<DeclNode> dl = new LinkedList<DeclNode>();
                                                               RESULT = dl;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= VarDecl DeclList 
            {
              List<DeclNode> RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		VarDeclNode vd = (VarDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<DeclNode> dl = (List<DeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                               List<VarDeclNode> lvd = new LinkedList<VarDeclNode>();
                                                               lvd.add(vd);
                                                               DeclNode d = new DeclNode();
                                                               d.addVarDeclList(lvd);
                                                               dl.add(0,d);
                                                               RESULT = dl;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= FunDecl DeclList 
            {
              List<DeclNode> RESULT =null;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		FunDeclNode fd = (FunDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<DeclNode> dl = (List<DeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                               List<FunDeclNode> lfd = new LinkedList<FunDeclNode>();
                                                               lfd.add(fd);
                                                               DeclNode d = new DeclNode();
                                                               d.addFunDeclList(lfd);
                                                               dl.add(0,d);
                                                               RESULT = dl;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              MainFuncDeclNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		FunDeclNode f = (FunDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                               RESULT = new MainFuncDeclNode(f);
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdInitNode> il = (List<IdInitNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                               VarDeclNode vd = new VarDeclNode(t);
                                                               vd.setIdInitNodeVarDeclNode(il);
                                                               RESULT = vd;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdInitObbNode> il = (List<IdInitObbNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	                                                           VarDeclNode vd = new VarDeclNode(Symbols.VAR);
	                                                           vd.setIdInitObbNode(il);
	                                                           RESULT = vd;
	                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              Integer RESULT =null;
		 RESULT = Symbols.INTEGER; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Integer RESULT =null;
		 RESULT = Symbols.BOOL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              Integer RESULT =null;
		 RESULT = Symbols.FLOAT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              Integer RESULT =null;
		 RESULT = Symbols.STRING; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              Integer RESULT =null;
		 RESULT = Symbols.CHAR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              List<IdInitNode> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                               List<IdInitNode> idl = new LinkedList<IdInitNode>();
                                                               idl.add( new IdInitNode(new IdentifierExprNode(i,ixleft,ixright)));
                                                               RESULT = idl;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              List<IdInitNode> RESULT =null;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdInitNode> idl = (List<IdInitNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                                                            idl.add(new IdInitNode(new IdentifierExprNode(i,ixleft,ixright)));
	                                                            RESULT = idl;
	                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              List<IdInitNode> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                                                            List<IdInitNode> idl = new LinkedList<IdInitNode>();
	                                                            idl.add( new IdInitNode(new IdentifierExprNode(i,ixleft,ixright),e));
	                                                            RESULT = idl;
	                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              List<IdInitNode> RESULT =null;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<IdInitNode> idl = (List<IdInitNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                                                            idl.add( new IdInitNode(new IdentifierExprNode(i,ixleft,ixright),e));
                                                                RESULT = idl;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              List<IdInitObbNode> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                List<IdInitObbNode> idl = new LinkedList<IdInitObbNode>();
                                                                idl.add( new IdInitObbNode(new IdentifierExprNode(i,ixleft,ixright),c));
                                                                RESULT = idl;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              List<IdInitObbNode> RESULT =null;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<IdInitObbNode> idl = (List<IdInitObbNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                                                            idl.add( new IdInitObbNode(new IdentifierExprNode(i,ixleft,ixright),c));
	                                                            RESULT = idl;
	                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Constant RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerConstantNode(i,ixleft,ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Constant RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealConstantNode(r,rxleft,rxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Constant RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanConstantNode(true,bxleft,bxright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Constant RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanConstantNode(false,bxleft,bxright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              Constant RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConstantNode(s,sxleft,sxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              Constant RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		char c = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharConstantNode(c,cxleft,cxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDeclNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<ParamDeclNode> pl = (List<ParamDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BodyNode b = (BodyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                    IdentifierExprNode id = new IdentifierExprNode(i,ixleft,ixright);
                                                                                    FunDeclNode fd = new FunDeclNode(id, pl, t, b);
                                                                                    RESULT = fd;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FunDecl ::= DEF ID LPAR RPAR COLON TypeOrVoid Body 
            {
              FunDeclNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BodyNode b = (BodyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                    IdentifierExprNode id = new IdentifierExprNode(i,ixleft,ixright);
                                                                                    FunDeclNode fd = new FunDeclNode(id, t, b);
                                                                                    RESULT = fd;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Body ::= LBRAC VarDeclList StatList RBRAC 
            {
              BodyNode RESULT =null;
		Location vdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<VarDeclNode> vdl = (List<VarDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                       BodyNode bd = new BodyNode(vdl, sl);
                                                                       RESULT = bd;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Body ::= LBRAC VarDeclList RBRAC 
            {
              BodyNode RESULT =null;
		Location vdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<VarDeclNode> vdl = (List<VarDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                       BodyNode bd = new BodyNode();
                                                                       bd.setVarDeclList(vdl);
                                                                       RESULT = bd;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Body ::= LBRAC StatList RBRAC 
            {
              BodyNode RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                       BodyNode bd = new BodyNode();
                                                                       bd.setStmtNodeList(sl);
                                                                       RESULT = bd;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Body ::= LBRAC RBRAC 
            {
              BodyNode RESULT =null;
		
                                                                       BodyNode bd = new BodyNode();
                                                                       RESULT = bd;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParamDeclList ::= ParDecl 
            {
              List<ParamDeclNode> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ParamDeclNode p = (ParamDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                       List<ParamDeclNode> pl = new LinkedList<ParamDeclNode>();
                                                                       pl.add(p);
                                                                       RESULT = pl;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParamDeclList ::= ParamDeclList PIPE ParDecl 
            {
              List<ParamDeclNode> RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParamDeclNode> pl = (List<ParamDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ParamDeclNode p = (ParamDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        pl.add(p);
                                                                        RESULT= pl;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParDecl ::= Type IdList 
            {
              ParamDeclNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierExprNode> il = (List<IdentifierExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        ParamDeclNode pd = new ParamDeclNode(t, il);
                                                                        RESULT = pd;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ParDecl ::= OUT Type IdList 
            {
              ParamDeclNode RESULT =null;
		Location t1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location t1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location il1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location il1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdentifierExprNode> il1 = (List<IdentifierExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                         ParamDeclNode pd1 = new ParamDeclNode(t1, il1, true);
                                                                         RESULT = pd1;
	                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TypeOrVoid ::= Type 
            {
              Integer RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TypeOrVoid ::= VOID 
            {
              Integer RESULT =null;
		 RESULT = Symbols.VOID; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= VarDecl VarDeclList 
            {
              List<VarDeclNode> RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		VarDeclNode vd = (VarDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location vdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<VarDeclNode> vdl = (List<VarDeclNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                       vdl.add(0, vd);
                                                                       RESULT = vdl;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclList ::= VarDecl 
            {
              List<VarDeclNode> RESULT =null;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		VarDeclNode vd = (VarDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                       List<VarDeclNode> vdl = new LinkedList<VarDeclNode>();
                                                                       vdl.add(vd);
                                                                       RESULT = vdl;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatList ::= Stat 
            {
              List<StatementNode> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        List<StatementNode> ls = new LinkedList<StatementNode>();
                                                                        ls.add(s);
                                                                        RESULT = ls;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatList ::= Stat StatList 
            {
              List<StatementNode> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        sl.add(0, s);
                                                                        RESULT = sl;
	                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= IfStat 
            {
              StatementNode RESULT =null;
		Location ifsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ifsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		IfStatNode ifs = (IfStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ForStat 
            {
              StatementNode RESULT =null;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ForStatNode fs = (ForStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= ReadStat SEMI 
            {
              StatementNode RESULT =null;
		Location rsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ReadStatNode rs = (ReadStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = rs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WriteStat SEMI 
            {
              StatementNode RESULT =null;
		Location wrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location wrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		WriteStatNode wr = (WriteStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = wr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= AssignStat SEMI 
            {
              StatementNode RESULT =null;
		Location asxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location asxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignStatNode as = (AssignStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WhileStat 
            {
              StatementNode RESULT =null;
		Location wsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location wsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		WhileStatNode ws = (WhileStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= FunCall SEMI 
            {
              StatementNode RESULT =null;
		Location fcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		FunCallStatNode fc = (FunCallStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN Expr SEMI 
            {
              StatementNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                       ReturnStatNode rs = new ReturnStatNode(e, exleft, exright);
                                                                       RESULT = rs;
	                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= RETURN SEMI 
            {
              StatementNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                       ReturnStatNode rs = new ReturnStatNode(rxleft,rxright);
                                                                       RESULT = rs;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= MunnezzStat 
            {
              StatementNode RESULT =null;
		Location msxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location msxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MunnezzStatNode ms = (MunnezzStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ms; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= Init_do_for_step SEMI 
            {
              StatementNode RESULT =null;
		Location idfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		InitDoForStepNode idfs = (InitDoForStepNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = idfs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IfStat ::= IF Expr THEN Body 
            {
              IfStatNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location btxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location btxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BodyNode bt = (BodyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        IfStatNode is = new IfStatNode(e, bt);
                                                                        RESULT = is;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IfStat ::= IF Expr THEN Body ELSE Body 
            {
              IfStatNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location btxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location btxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		BodyNode bt = (BodyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BodyNode be = (BodyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        IfStatNode is = new IfStatNode(e, bt, be);
                                                                        RESULT = is;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileStatNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BodyNode b = (BodyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        WhileStatNode ws = new WhileStatNode(e, b);
                                                                        RESULT = ws;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForStatNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location frxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location frxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Integer fr = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location toxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location toxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer to = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		BodyNode b = (BodyNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                        IdentifierExprNode id = new IdentifierExprNode(i,ixleft,ixright);
                                                                                        IntegerConstantNode ifrom = new IntegerConstantNode(fr, frxleft,frxright);
                                                                                        IntegerConstantNode ito = new IntegerConstantNode(to, toxleft,toxright);
                                                                                        ForStatNode fs = new ForStatNode(id, ifrom, ito, b);
                                                                                        RESULT = fs;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadStatNode RESULT =null;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierExprNode> idl = (List<IdentifierExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        ReadStatNode rs = new ReadStatNode(idl, new StringConstantNode(s, sxleft, sxright));
                                                                        RESULT = rs;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ReadStat ::= IdList READ 
            {
              ReadStatNode RESULT =null;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<IdentifierExprNode> idl = (List<IdentifierExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                        ReadStatNode rs = new ReadStatNode(idl);
                                                                        RESULT = rs;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IdList ::= ID 
            {
              List<IdentifierExprNode> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        List<IdentifierExprNode> idl = new LinkedList<IdentifierExprNode>();
                                                                        IdentifierExprNode id = new IdentifierExprNode(i, ixleft,ixright);
                                                                        idl.add(id);
                                                                        RESULT = idl;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IdList ::= IdList COMMA ID 
            {
              List<IdentifierExprNode> RESULT =null;
		Location idlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierExprNode> idl = (List<IdentifierExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        idl.add(new IdentifierExprNode(i, ixleft, ixright));
                                                                        RESULT = idl;
	                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteStatNode RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                        WriteStatNode ws = new WriteStatNode(el, false);
                                                                        RESULT = ws;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteStatNode RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                        WriteStatNode ws = new WriteStatNode(el, true);
                                                                        RESULT = ws;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStatNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<IdentifierExprNode> il = (List<IdentifierExprNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        AssignStatNode as = new AssignStatNode(il, el);
                                                                        RESULT = as;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FunCall ::= ID LPAR ExprList RPAR 
            {
              FunCallStatNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallStatNode(new IdentifierExprNode(i,ixleft,ixright),el,ixleft,ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FunCall ::= ID LPAR RPAR 
            {
              FunCallStatNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallStatNode(new IdentifierExprNode(i,ixleft,ixright),ixleft,ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprList ::= Expr 
            {
              List<ExpressionNode> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                    List<ExpressionNode> el = new LinkedList<ExpressionNode>();
                                                    el.add(e);
                                                    RESULT = el;
                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExprList ::= Expr COMMA ExprList 
            {
              List<ExpressionNode> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                                                el.add(0,e);
	                                                RESULT = el;
	                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= TRUE 
            {
              ExpressionNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanConstantNode(true,txleft,txright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= FALSE 
            {
              ExpressionNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanConstantNode(false,fxleft,fxright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= INTEGER_CONST 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerConstantNode(i,ixleft,ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= REAL_CONST 
            {
              ExpressionNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealConstantNode(r,rxleft,rxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= STRING_CONST 
            {
              ExpressionNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConstantNode(s,sxleft,sxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= CHAR_CONST 
            {
              ExpressionNode RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		char c = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharConstantNode(c,cxleft,cxright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= ID 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExprNode(i,ixleft,ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= ID LPAR ExprList RPAR 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallExprNode(new IdentifierExprNode(i,ixleft,ixright),el,ixleft,ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= ID LPAR RPAR 
            {
              ExpressionNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallExprNode(new IdentifierExprNode(i,ixleft,ixright),ixleft,ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr PLUS Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.PLUS,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr MINUS Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.MINUS,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr TIMES Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.TIMES,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr DIV Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.DIV,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr AND Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.AND,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr POW Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.POW,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr STR_CONCAT Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.STR_CONCAT,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr OR Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.OR,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr GT Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.GT,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr GE Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.GE,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr LT Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.LT,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr LE Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.LE,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr EQ Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.EQ,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr NE Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.NE,e2,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= MINUS Expr 
            {
              ExpressionNode RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpressionNode(Symbols.MINUS,e,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= NOT Expr 
            {
              ExpressionNode RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpressionNode(Symbols.NOT,e,oxright,oxleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= LPAR Expr RPAR 
            {
              ExpressionNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr ASSIGN Expr 
            {
              ExpressionNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpressionNode(e1,Symbols.ASSIGN,e2,axright,axleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MunnezzStat ::= MUNNEZZ LPAR Expr RPAR LBRAC AsfnazzasList RBRAC 
            {
              MunnezzStatNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location aLxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aLxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<AsfnazzaCaseStatNode> aL = (List<AsfnazzaCaseStatNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 MunnezzStatNode ms = new MunnezzStatNode(e, aL);
                                                                           RESULT = ms;
                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MunnezzStat",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MunnezzStat ::= MUNNEZZ LPAR Expr RPAR LBRAC RBRAC 
            {
              MunnezzStatNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 MunnezzStatNode ms = new MunnezzStatNode(e);
                                                            RESULT = ms;
                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MunnezzStat",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AsfnazzasList ::= AsfnazzaCase AsfnazzasList 
            {
              List<AsfnazzaCaseStatNode> RESULT =null;
		Location aCxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location aCxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AsfnazzaCaseStatNode aC = (AsfnazzaCaseStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aLxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aLxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<AsfnazzaCaseStatNode> aL = (List<AsfnazzaCaseStatNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                       aL.add(0, aC);
                                                       RESULT = aL;
                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsfnazzasList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AsfnazzasList ::= AsfnazzaCase 
            {
              List<AsfnazzaCaseStatNode> RESULT =null;
		Location aCxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aCxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AsfnazzaCaseStatNode aC = (AsfnazzaCaseStatNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<AsfnazzaCaseStatNode> aL = new LinkedList<>();
                                                       aL.add(aC);
                                                       RESULT = aL;
                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsfnazzasList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AsfnazzaCase ::= ASFNAZZA Expr COLON StatList BREAK SEMI 
            {
              AsfnazzaCaseStatNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 AsfnazzaCaseStatNode acs = new AsfnazzaCaseStatNode(e, sl);
                                                                 RESULT = acs;
                                                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsfnazzaCase",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AsfnazzaCase ::= ASFNAZZA Expr COLON BREAK SEMI 
            {
              AsfnazzaCaseStatNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 AsfnazzaCaseStatNode acs = new AsfnazzaCaseStatNode(e);
                                                            RESULT = acs;
                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsfnazzaCase",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // InitExpr ::= Type IdInitList 
            {
              VarDeclNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdInitNode> il = (List<IdInitNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                               VarDeclNode vd = new VarDeclNode(t);
                                                               vd.setIdInitNodeVarDeclNode(il);
                                                               RESULT = vd;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InitExpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // InitExpr ::= VAR IdInitObblList 
            {
              VarDeclNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<IdInitObbNode> il = (List<IdInitObbNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                                                           VarDeclNode vd = new VarDeclNode(Symbols.VAR);
	                                                           vd.setIdInitObbNode(il);
	                                                           RESULT = vd;
	                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InitExpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Init_do_for_step ::= Init DO LBRAC StatList RBRAC ForStep Step 
            {
              InitDoForStepNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		InitNode i = (InitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ForStepNode fs = (ForStepNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StepNode s = (StepNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                            InitDoForStepNode idfs = new InitDoForStepNode(i, sl, fs, s);
                                                                            RESULT = idfs;
                                                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_do_for_step",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Init_do_for_step ::= Init DO LBRAC RBRAC ForStep Step 
            {
              InitDoForStepNode RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		InitNode i = (InitNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ForStepNode fs = (ForStepNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		StepNode s = (StepNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                            InitDoForStepNode idfs = new InitDoForStepNode(i, fs, s);
                                                                            RESULT = idfs;
                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_do_for_step",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Init ::= INIT LPAR InitExpr RPAR 
            {
              InitNode RESULT =null;
		Location iexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location iexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		VarDeclNode ie = (VarDeclNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  InitNode id = new InitNode(ie);
                                            RESULT = id;
                                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Init ::= INIT LPAR RPAR 
            {
              InitNode RESULT =null;
		
                                            InitNode id = new InitNode();
                                            RESULT = id;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ForStep ::= FOR LPAR Expr RPAR 
            {
              ForStepNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            ForStepNode fs = new ForStepNode(e);
                                            RESULT = fs;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStep",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ForStep ::= FOR LPAR RPAR 
            {
              ForStepNode RESULT =null;
		
                                            ForStepNode fs = new ForStepNode();
                                            RESULT = fs;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStep",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Step ::= STEP LPAR ExprList RPAR 
            {
              StepNode RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            StepNode fs = new StepNode(el);
                                            RESULT = fs;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Step",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Step ::= STEP LPAR RPAR 
            {
              StepNode RESULT =null;
		
                                            StepNode fs = new StepNode();
                                            RESULT = fs;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Step",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
